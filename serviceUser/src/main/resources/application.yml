# ===================================================================
# Spring Boot Configuration for UserService
# Production-ready configuration with security and performance optimization
# ===================================================================

server:
  port: 8081
  servlet:
    context-path: /
  compression:
    enabled: true
  error:
    include-stacktrace: never
    include-message: always

# ===================================================================
# APPLICATION CONFIGURATION
# ===================================================================
spring:
  application:
    name: userservice
  
  # Profile Configuration
  profiles:
    active: dev
  
  # MongoDB Configuration
  data:
    mongodb:
      host: ${MONGODB_HOST:localhost}
      port: ${MONGODB_PORT:27017}
      database: ${MONGODB_DATABASE:userservice}
      username: ${MONGODB_USERNAME:}
      password: ${MONGODB_PASSWORD:}
      authentication-database: ${MONGODB_AUTH_DB:admin}
      uri: ${MONGODB_URI:mongodb://localhost:27017/userservice}
  
  # RabbitMQ Configuration
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VHOST:/}
    connection-timeout: 60000
    template:
      mandatory: true
      receive-timeout: 5000
      reply-timeout: 5000
    listener:
      simple:
        concurrency: 3
        max-concurrency: 10
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          max-interval: 10000

  # Security Configuration
  security:
    user:
      name: ${SECURITY_USER:admin}
      password: ${SECURITY_PASSWORD:admin123}
      roles: ADMIN

  # Jackson Configuration
  jackson:
    serialization:
      write-dates-as-timestamps: false
      indent-output: true
    deserialization:
      fail-on-unknown-properties: false
    default-property-inclusion: NON_NULL

  # Validation Configuration
  validation:
    enabled: true

# ===================================================================
# JWT CONFIGURATION
# ===================================================================
app:
  jwt:
    secret: ${JWT_SECRET:mySecretKey123456789012345678901234567890123456789012345678901234567890}
    expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds
    refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 days in milliseconds
    
  # CORS Configuration
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8081,http://localhost:4200}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
    allowed-headers: ${CORS_ALLOWED_HEADERS:*}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}

  # RabbitMQ Configuration
  rabbitmq:
    timeout: ${RABBITMQ_TIMEOUT:5000}
    retry-attempts: ${RABBITMQ_RETRY_ATTEMPTS:3}

# ===================================================================
# LOGGING CONFIGURATION
# ===================================================================
logging:
  level:
    com.m1_fonda.serviceUser: ${LOG_LEVEL:INFO}
    org.springframework.security: WARN
    org.springframework.data.mongodb: WARN
    org.springframework.amqp: WARN
    org.springframework.web: INFO
    org.mongodb.driver: WARN
    io.jsonwebtoken: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: ${LOG_FILE:logs/userservice.log}
    max-size: 10MB
    max-history: 30

# ===================================================================
# ACTUATOR CONFIGURATION
# ===================================================================
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  info:
    env:
      enabled: true
    java:
      enabled: true
    os:
      enabled: true

# ===================================================================
# SPRINGDOC (SWAGGER) CONFIGURATION
# ===================================================================
springdoc:
  api-docs:
    path: /v3/api-docs
    enabled: true
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    tags-sorter: alpha
    operations-sorter: alpha
    doc-expansion: none
    filter: true
  show-actuator: false

# ===================================================================
# CUSTOM APPLICATION PROPERTIES
# ===================================================================
userservice:
  # Business Rules
  validation:
    password:
      min-length: 8
      require-uppercase: true
      require-lowercase: true
      require-numbers: true
      require-special-chars: true
    phone:
      pattern: "^6[5-9]\\d{7}$"
      country-code: "+237"
    cni:
      pattern: "\\d{8,12}"
      min-length: 8
      max-length: 12
  
  # Security Settings
  security:
    max-login-attempts: 3
    lockout-duration-minutes: 15
    session-timeout-hours: 24
    password-reset-token-validity-hours: 2
  
  # File Upload Settings
  upload:
    max-file-size: 10MB
    allowed-file-types: jpg,jpeg,png,pdf
    kyc-document-path: ${KYC_DOCUMENT_PATH:/uploads/kyc/}
  
  # Business Limits
  transaction:
    deposit:
      min-amount: 100
      max-amount: 10000000
    withdrawal:
      min-amount: 100
      max-amount: 5000000
    transfer:
      min-amount: 100
      max-amount: 5000000
    daily-limits:
      withdrawal: 1000000
      transfer: 2000000
      operations: 10000000
  
  # External Services
  services:
    agence:
      url: ${AGENCE_SERVICE_URL:http://localhost:8080}
      timeout: 5000
      retry-attempts: 3
    notification:
      url: ${NOTIFICATION_SERVICE_URL:http://localhost:8082}
      enabled: ${NOTIFICATION_ENABLED:true}
    sms:
      provider: ${SMS_PROVIDER:default}
      api-key: ${SMS_API_KEY:}
      sender-name: ${SMS_SENDER:ENSF-Wallet}

# ===================================================================
# PROFILE-SPECIFIC CONFIGURATIONS
# ===================================================================

---
spring:
  config:
    activate:
      on-profile: dev

logging:
  level:
    com.m1_fonda.serviceUser: DEBUG
    org.springframework.security: DEBUG
    org.springframework.data.mongodb: DEBUG

userservice:
  security:
    max-login-attempts: 5 # More lenient for development

---
spring:
  config:
    activate:
      on-profile: test
  data:
    mongodb:
      database: userservice_test
  rabbitmq:
    host: localhost
    port: 5672

logging:
  level:
    com.m1_fonda.serviceUser: DEBUG

userservice:
  services:
    notification:
      enabled: false

---
spring:
  config:
    activate:
      on-profile: prod
    
  data:
    mongodb:
      uri: ${MONGODB_URI}
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
    ssl:
      enabled: ${RABBITMQ_SSL:false}

server:
  port: 8081
  ssl:
    enabled: ${SSL_ENABLED:false}
    key-store: ${SSL_KEYSTORE:}
    key-store-password: ${SSL_KEYSTORE_PASSWORD:}

  

logging:
  level:
    com.m1_fonda.serviceUser: INFO
    org.springframework.security: WARN
  file:
    name: /var/log/userservice/application.log

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics

userservice:
  security:
    max-login-attempts: 3
    lockout-duration-minutes: 30
  services:
    notification:
      enabled: true